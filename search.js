/*
 PLEASE DO NOT EDIT THIS FILE FROM ANYWHERE BUT ESPN.ESD.AdSales.Common.Web PROJECT.
 */

var searchEvents = (function () {
    return {
        collapse: 'ad-search-collapse',
        expand: 'ad-search-expand',
        buildFilterContent: 'ad-build-filter-content'
    };
}());

var filterBuilders = (function () {
    return {
        buildStandardCheckboxFilter: 'buildStandardCheckboxFilter',
        buildHierarchicalLOVFilter: 'buildHierarchicalLOVFilter',
        buildBinaryCheckboxFilter: 'buildBinaryCheckboxFilter',
        buildShowSelectedCheckboxFilter: 'buildShowSelectedCheckboxFilter',
        buildMultiSelectLOVFilter: 'buildMultiSelectLOVFilter'
    };
}());

(function ( $, ko ) {

    "use strict";

    if ( !$.fn.adSalesSearch ) {
        $.fn.adSalesSearch = function ( options ) {
            var css = {
                    accordion: 'ad-search-accordion',
                    buttonContainer: 'ad-search-button-container',
                    commandButton: 'ad-sales-command-button',
                    searchScrollContainer: 'ad-search-scroll-container',
                    scrollContainer: 'ad-scroll-container',
                    toggle: 'ad-search-toggle',
                    toggleOpen: 'ad-search-toggle-open',
                    toggleClosed: 'ad-search-toggle-closed',
                    panelToggle: 'ad-search-panel-toggle',
                    panelToggleOpen: 'ad-search-panel-toggle-open',
                    panelToggleClosed: 'ad-search-panel-toggle-closed',
                    additionalCriteriaIconCollapsed: 'ad-search-additional-criteria-icon-collapsed',
                    additionalCriteriaIconExpanded: 'ad-search-additional-criteria-icon-expanded',
                    buttonSetFocus: 'ad-search-label-focus',
                    hierarchicalChosen: 'chzn-select-hierarchical',
                    chosen: 'chzn-select',
                    hierarchicalFilterContainer: 'ad-sales-search-hierarchical-filter',
                    filterCheckboxHeader: 'ad-sales-search-checkbox-group-header',
                    filterCheckboxGroup: 'ad-sales-search-checkbox-group',
                    filterCheckboxLabel: 'ad-sales-search-checkbox-label',
                    filterBinaryCheckboxLabel: 'ad-sales-search-binary-checkbox-label',
                    filterBinaryCheckboxGroup: 'ad-sales-search-binary-checkbox-group',
                    filterCheckboxContainer: 'ad-sales-search-checkbox-container',
                    filterCheckbox: 'ad-sales-search-checkbox',
                    filterAllCheckbox: 'ad-sales-search-select-all-checkbox',
                    internalActiveAccordion: 'ad-search-active-accordion'
                },
                selectors = {
                    accordion: '.ad-search-accordion',
                    activeAccordion: '.ui-accordion-header-active',
                    searchHeader: '.ad-search-header',
                    searchScrollContainer: '.ad-search-scroll-container',
                    scrollContainer: '.ad-scroll-container',
                    toggle: '.ad-search-toggle',
                    panelToggle: '.ad-search-panel-toggle',
                    additionalCriteriaToggle: '.ad-search-additional-criteria-toggle',
                    additionalCriteria: '.ad-search-additional-criteria',
                    additionalCriteriaIcon: '.ad-search-additional-criteria-icon',
                    buttonSet: '.field-buttonset-container .buttonset-inner-container > label',
                    chosen: '.chzn-select',
                    chosenContainer: '.chzn-container',
                    chosenDropDown: '.chzn-drop',
                    calendarIcon: '.ad-search-calendar-icon-default',
                    buttonSetRadioAndCheckboxSelector: ['.field-buttonset-container input[type="radio"]',
                        '.field-buttonset-container input[type="checkbox"]',
                        '.buttonset-container input[type="radio"]',
                        '.buttonset-container input[type="checkbox"]'].join( ', ' ),
                    filterCheckbox: '.ad-sales-search-checkbox',
                    internalActiveAccordion: '.ad-search-active-accordion'
                },
                magicNumbersAreBad = {
                    buttonContainerHeight: 80,
                    searchPanelHeaderHeight: 51,
                    searchPanelFooterHeight: 5,
                    accordionHeaderHeight: 40,
                    contentPaddingOffset: 10,
                    buffer: 5
                },
                settings = $.extend( {
                    header: selectors.searchHeader,
                    searchContentSelector: '.ad-search-content',
                    filterContentSelector: '.ad-search-filter-content',
                    searchContext: $('<span class="ad-search-large-header-text">Search and Filter</span><span class="ad-search-magnifying-glass"></span>'), //$( '<input type="text" id="ad-search-context" placeholder="What are you looking for?"/><span class="ad-search-magnifying-glass"></span>' ),
                    defaultPanelSelector: '.ad-search-filter-content',
                    initialize: $.noop,
                    activate: $.noop,
                    searchCallback: $.noop,
                    clearCallback: $.noop,
                    filterClearCallback: $.noop,
                    active: 0
                }, options),
                searchActionsMarkup = [
                    '<div class="' + css.buttonContainer + '">',
                    '<div class="ad-search-button-inner-container">',
                    '<input type="button" id="ad-search-search" value="Search" class="' + css.commandButton + '" />',
                    '<a href="#" id="ad-search-clear" class="filter-secondary-link">Clear</a>',
                    '</div>',
                    '</div>'],
                filterActionsMarkup = [
                    '<div class="' + css.buttonContainer + '">',
                    '<div class="ad-filter-button-inner-container">',
                    '<a href="#" id="ad-search-filter-clear" value="Clear" class="filter-secondary-link">Clear</a>',
                    '</div>',
                    '</div>'],
                showHideOptions = {
                    effect: 'blind',
                    duration: 500
                },
                _filterBuilders = {},
                filterViewModel,
                FilterViewModel = function () {
                    var self = this,
                        allPrefix = 'all',
                        allSuffix = 'All',
                        selectedPrefix = 'selected',
                        updateObservableArrayProperty = function ( filterData, prefix ) {
                            var observablePropertyName = (prefix || '') + filterData.filterColumn;

                            if ( self[observablePropertyName] ) {
                                if ( $.grep( self[observablePropertyName](),function ( item ) {
                                    return item.value === filterData.value;
                                } ).length === 0 ) { // does not exist
                                    self[observablePropertyName].push( filterData );
                                }
                            } else {
                                // property doesn't exist - create it
                                self[observablePropertyName] = ko.observableArray( [filterData] );
                            }

                            return observablePropertyName;
                        };

                    self.createSelectedObservableArrayProperty = function ( filterColumn ) {
                        var selectedPropertyName = selectedPrefix + filterColumn;

                        if ( !self[selectedPropertyName] ) {
                            self[selectedPropertyName] = ko.observableArray( [] );
                        }

                        return selectedPropertyName;
                    };

                    self.createSelectedObservableProperty = function ( filterColumn ) {
                        var selectedPropertyName = selectedPrefix + filterColumn;

                        if ( !self[selectedPropertyName] && filterColumn !== undefined ) {
                            self[selectedPropertyName] = ko.observable();
                        }

                        return selectedPropertyName;
                    };

                    self.createSelectedAllObservableProperty = function ( filterColumn ) {
                        var selectAllProperty = self.createSelectedObservableProperty( filterColumn + allSuffix );

                        self[selectAllProperty].subscribe( function ( newValue ) {
                            var selectedPropertyName = selectAllProperty.replace( allSuffix, '' ),
                                allPropertyName = selectAllProperty.replace( allSuffix, '' ).replace( selectedPrefix, allPrefix ),
                                filterColumn = allPropertyName.replace( allPrefix, '' );

                            if ( newValue ) {
                                $.each( self[allPropertyName](), function () {
                                    var objectToPush = this,
                                        selectedValue = objectToPush.value.toString();

                                    self[selectedPropertyName].push( selectedValue );
                                } );

                                $.EventBus( filterEvents.applyFilterAll ).publish( filterColumn, self[selectedPropertyName]() );

                            } else {
                                self[selectedPropertyName]( [] );

                                $.EventBus( filterEvents.removeFilterAll ).publish( filterColumn );
                            }
                        } );

                        return selectAllProperty;
                    };

                    self.createOrUpdateAllObservableArrayProperty = function ( filterData ) {
                        return updateObservableArrayProperty( filterData, allPrefix );
                    };

                    self.buildDescription = function ( description, total ) {
                        return description + ' (' + total.toString() + ')';
                    };

                    self.buildId = function ( filterColumn, value ) {
                        return filterColumn + '_' + value.toString();
                    };

                    $.EventBus( filterEvents.clearFilter ).subscribe( function () {
                        var cachedHasOwn = Object.prototype.hasOwnProperty, key,
                            currentValue;

                        for ( key in self ) {
                            if ( cachedHasOwn.call( self, key ) && ko.isObservable( self[key] ) && key.substring( 0, 8 ) === selectedPrefix ) {
                                currentValue = self[key]();

                                if ( currentValue instanceof Array ) {
                                    self[key]( [] );
                                    // in case it is a chosen drop down we need to trigger the chosen update event to make sure the UI gets updated
                                    $.EventBus( uiEvents.triggerChosenUpdate ).publish();
                                } else if ( currentValue ) {
                                    self[key]( false );
                                } else {
                                    self[key]( undefined );
                                }
                            }
                        }

                    } );

                };

            return this.each( function () {
                var $self = $( this ),
                    calculateScrollableHeight = function () {
                        // this function needs to take on containers one at a time and is meant to be invoked with the scroll container as 'this'
                        $( this ).css( 'height', 'calc(100% - ' + magicNumbersAreBad.buttonContainerHeight + 'px)' ); //NOTE: this is for scrolling of container to not go into button container area
                    },
                    appendPanelContent = function ( contents, $accordion ) {
                        var $searchContextContainer = $( '<div class="ad-search-context-container"></div>' )
                                .prepend( $( '<span class="' + [css.toggle, css.toggleOpen].join( ' ' ) + '"></span>' ) )
                                .prepend( settings.searchContext ),
                            createHeader = function ( text, panelInitialState ) {
                                return '<div class="' + settings.header.replace( '.', '' ) + '" data-panel-type="' + text + '"><span class="ad-search-header-text">' + text + '</span><span class="' + [css.panelToggle, panelInitialState].join( ' ' ) + '"></span></div>';
                            },
                            wrapWithScrollContainer = function ( panel ) {
                                // need an inner container to control scrolling, only add it if it doesn't already exist
                                if ( panel.panelContent && $( selectors.searchScrollContainer, panel.panelContent ).length === 0 ) {
                                    panel.panelContent.wrapInner( '<div class="' + [css.searchScrollContainer, css.scrollContainer].join( ' ' ) + '"></div> ' ).append( panel.actionsMarkup.join( '' ) );
                                }
                            },
                            appendToAccordion = function ( panel ) {
                                if ( panel.panelContent ) {
                                    $accordion
                                        .append( createHeader( panel.panelType, panel.defaultPanelToggle ) )
                                        .append( panel.panelContent );
                                }
                            };

                        $self.empty();

                        $.each( contents, function () {
                            wrapWithScrollContainer( this );
                            appendToAccordion( this );
                        } );

                        $self
                            .prepend( $searchContextContainer )
                            .append( $accordion )
                            .append( '<div class="ad-search-footer"></div> ' );
                    },
                    resizeElements = function ( $accordion, $searchContent, $filterContent ) {
                        var containerHeight,
                            maxAccordionHeight,
                            numberOfPanels,
                            maxContentHeight,
                            maxAccordionHeaderHeight;

                        // need to break chaining here to grab the height after the content has been added and set max heights so we don't get anything pushed out of whatever is containing this widget
                        containerHeight = $self.height();
                        maxAccordionHeight = containerHeight - magicNumbersAreBad.searchPanelHeaderHeight - magicNumbersAreBad.searchPanelFooterHeight;
                        numberOfPanels = $self.find( settings.header ).length;
                        maxAccordionHeaderHeight = ( numberOfPanels * magicNumbersAreBad.accordionHeaderHeight);
                        maxContentHeight = maxAccordionHeight - maxAccordionHeaderHeight - magicNumbersAreBad.contentPaddingOffset - magicNumbersAreBad.buffer;

                        $accordion.css( 'max-height', maxAccordionHeight );
                        $searchContent.css( 'max-height', maxContentHeight );
                        if ( $filterContent ) {
                            $filterContent.css( 'max-height', maxContentHeight );
                        }
                    },
                    buildAndConfigurePanel = function () {
                        var $accordion = $( '<div class="' + css.accordion + '">' ),
                            $searchContent = $self.find( settings.searchContentSelector ).detach(),
                            $filterContent = $self.find( settings.filterContentSelector ).length ? $self.find( settings.filterContentSelector ).detach() : undefined;

                        appendPanelContent( [
                            {
                                panelType: 'Search',
                                panelContent: $searchContent,
                                actionsMarkup: searchActionsMarkup,
                                defaultPanelToggle: css.panelToggleOpen
                            },
                            {
                                panelType: 'Filter',
                                panelContent: $filterContent,
                                actionsMarkup: filterActionsMarkup,
                                defaultPanelToggle: css.panelToggleClosed
                            }
                        ], $accordion );

                        resizeElements( $accordion, $searchContent, $filterContent );

                        if ( $self.hasClass( 'ui-accordion' ) ) {
                            $self.accordion( 'destroy' );
                        }

                        $self
                            .accordion( {
                                header: settings.header,
                                active: settings.active,
                                animate: 1000,
                                heightStyle: 'fill',
                                beforeActivate: function ( event, ui ) {
                                    // switch icons
                                    ui.newHeader.find( selectors.panelToggle ).removeClass( css.panelToggleClosed ).addClass( css.panelToggleOpen );
                                    ui.oldHeader.find( selectors.panelToggle ).removeClass( css.panelToggleOpen ).addClass( css.panelToggleClosed );
                                },
                                activate: function ( event, ui ) {
                                    // re-configure slim scroll
                                    calculateScrollableHeight.call( ui.newPanel.find( selectors.searchScrollContainer ) );
                                    calculateScrollableHeight.call( ui.oldPanel.find( selectors.searchScrollContainer ) );

                                    // keep internal track of which panel is active
                                    ui.oldHeader.removeClass( css.internalActiveAccordion );
                                    ui.newHeader.addClass( css.internalActiveAccordion );

                                    ui.newPanel.find( 'input' ).first().focus();

                                    // call settings activate
                                    settings.activate( event, ui );
                                }
                            } );
                    },
                    registerEventHandlers = function () {
                        var stopPropagationOfChosenSelection = function ( event ) {
                                var dropDownIsOpen = $( selectors.chosenDropDown, event.currentTarget ).offset().left >= 0;

                                if ( event.keyCode === 13 && (dropDownIsOpen || $( event.target ).hasClass( 'search-choice-close' )) ) { // don't bubble enter so the panel won't execute search when focused in a select element
                                    event.stopPropagation();
                                }
                            },
                            callbackOnReturn = function ( event, callback ) {
                                if ( event.keyCode === 13 && event.target.id !== 'ad-search-clear' ) {
                                    callback.call( $self );
                                }
                            };

                        $self
                            .on( 'click', selectors.toggle, function () {
                                var $toggle = $( this ),
                                    $searchAccordion = $( selectors.accordion, $self ),
                                    $footer = $( '.ad-search-footer', $self );

                                if ( $searchAccordion.is( ':visible' ) ) {
                                    $self.css( 'height', 'auto' );
                                    $searchAccordion.hide( showHideOptions );
                                    $footer.hide( showHideOptions );
                                    $toggle.removeClass( css.toggleOpen ).addClass( css.toggleClosed );
                                    $.EventBus( searchEvents.collapse ).publish();
                                } else {
                                    $.EventBus( searchEvents.expand ).publish();
                                    $searchAccordion.show( showHideOptions );
                                    $footer.show( showHideOptions );
                                    $toggle.removeClass( css.toggleClosed ).addClass( css.toggleOpen );
                                }

                            } )
                            .on( 'click', selectors.internalActiveAccordion, function () {
                                var currentActiveIndex = parseInt( $self.accordion( 'option', 'active' ), 10 ),
                                    highestPossibleIndex = $self.find( settings.header ).length - 1,
                                    indexToOpen = (currentActiveIndex === highestPossibleIndex ? 0 : currentActiveIndex + 1);

                                $self.accordion( 'option', 'active', indexToOpen );
                            } )
                            .on( 'click', '#ad-search-search', function ( event ) {
                                settings.searchCallback.call( $self, event );
                            } )
                            .on( 'click', '#ad-search-clear', function ( event ) {
                                $self.find( settings.filterContentSelector ).find( selectors.searchScrollContainer ).empty();
                                settings.clearCallback.call( $self, event );
                            } )
                            .on( 'click', '#ad-search-filter-clear', function () {
                                settings.filterClearCallback.call( $self );
                            } )
                            .on( 'click', selectors.calendarIcon, function () {
                                $( this ).siblings( '.calendar-text-box' ).first().DatePickerShow();
                            } )
                            .on( 'click', selectors.buttonSet, function () {
                                $( this ).toggleClass( 'ui-state-active' );
                            } )
                            .on( 'click', selectors.additionalCriteriaToggle, function () {
                                var $additionalCriteriaToggle = $( this ),
                                    $additionalCriteriaIcon = $( selectors.additionalCriteriaIcon, $additionalCriteriaToggle ),
                                    $additionalCriteria = $( selectors.additionalCriteria );

                                if ( $additionalCriteria.is( ':visible' ) ) {
                                    $additionalCriteria.hide( showHideOptions );
                                    $additionalCriteriaToggle.contents().filter(function () {
                                        return this.nodeType === 3;
                                    } ).first().replaceWith( 'More Search Criteria' );
                                    $additionalCriteriaIcon.removeClass( css.additionalCriteriaIconExpanded ).addClass( css.additionalCriteriaIconCollapsed );
                                } else {
                                    $additionalCriteria.show( showHideOptions );
                                    $additionalCriteriaToggle.contents().filter(function () {
                                        return this.nodeType === 3;
                                    } ).first().replaceWith( 'Less Search Criteria' );
                                    $additionalCriteriaIcon.removeClass( css.additionalCriteriaIconCollapsed ).addClass( css.additionalCriteriaIconExpanded );
                                }
                            } )
                            .on( 'keydown', selectors.additionalCriteriaToggle, function ( event ) {
                                if ( event.keyCode === 32 ) { // space bar
                                    $( this ).trigger( 'click' );
                                }
                            } )
                            .on( 'focus', selectors.buttonSetRadioAndCheckboxSelector, function () {
                                $( 'label[for="' + $( this ).attr( 'id' ) + '"]', $self ).addClass( css.buttonSetFocus );
                            } )
                            .on( 'blur', selectors.buttonSetRadioAndCheckboxSelector, function () {
                                $( 'label[for="' + $( this ).attr( 'id' ) + '"]', $self ).removeClass( css.buttonSetFocus );
                            } );

                        // Enter does search in search panel
                        $( settings.searchContentSelector, $self )
                            .on( 'keydown', function ( event ) {
                                callbackOnReturn( event, settings.searchCallback );
                            } )
                            .on( 'keydown', selectors.chosenContainer, function ( event ) {
                                stopPropagationOfChosenSelection( event );
                            } );

                        // Enter clears filters in filter panel
                        $( settings.filterContentSelector, $self )
                            .on( 'keydown', function ( event ) {
                                callbackOnReturn( event, settings.filterClearCallback );
                            } )
                            .on( 'keydown', selectors.chosenContainer, function ( event ) {
                                stopPropagationOfChosenSelection( event );
                            } );

                        $( window ).resize( function () {
                            var activeHeaderIndex = $self.accordion( 'option', 'active' ),
                                animationValue;

                            // only want to resize if accordion is visible otherwise cannot calculate height properly
                            if ( $( selectors.accordion, $self ).is( ':visible' ) ) {

                                // HACK ALERT - if the call to $self.accordion( 'refresh' ) actually refreshed according to the new height, all this wouldn't be necessary...
                                buildAndConfigurePanel();

                                $( settings.defaultPanelSelector + ' ' + selectors.searchScrollContainer, $self ).each( function () {
                                    calculateScrollableHeight.call( $( this ) );
                                } );

                                animationValue = $self.accordion( 'option', 'animate' );
                                $self.accordion( 'option', 'animate', false );
                                $self.accordion( 'option', 'active', activeHeaderIndex );
                                $self.accordion( 'option', 'animate', animationValue );

                                // We need to mark and keep track of which panel is active so we can implement custom event handler on active panel
                                // to close itself and open next panel on click.  The jqueryUI accordion removes the .ui-accordion-header-active class
                                // by the time our event handler has access to it so we have to manage it ourselves.
                                $self.find( settings.header ).eq( activeHeaderIndex ).addClass( css.internalActiveAccordion );
                            }
                        } );

                        $.EventBus( searchEvents.buildFilterContent ).subscribe( function ( filterData ) {
                            var $filterContainer = $self.find( settings.filterContentSelector ).find( selectors.searchScrollContainer );

                            // clear out previous content, including ko bindings
                            $filterContainer.empty();

                            // re-initialize the view model since a new search brings new data
                            filterViewModel = new FilterViewModel();

                            $.each( filterData, function () {
                                var filter = this;

                                if ( _filterBuilders[filter.filterBuilder] ) {
                                    _filterBuilders[filter.filterBuilder]( filter, $filterContainer );
                                } else { //Default to standard checkboxes
                                    _filterBuilders[filterBuilders.buildStandardCheckboxFilter]( filter, $filterContainer );
                                }
                            } );

                            ko.applyBindings( filterViewModel, $filterContainer[0] );

                            // activate any chosen LOVs
                            $( selectors.chosen, $filterContainer )
                                .attr( 'data-placeholder', ' ' )
                                .chosen( { search_contains: true } );

                            $filterContainer.closest( settings.filterContentSelector ).prev().trigger( 'click' );
                            $filterContainer.find( 'input' ).first().focus();
                        } );

                        $.EventBus( uiEvents.triggerChosenUpdate ).subscribe( function () {
                            $( selectors.chosen, $self ).trigger( 'liszt:updated' );
                        } );
                    },
                    initializeFilterBuilders = function () {
                        _filterBuilders[filterBuilders.buildStandardCheckboxFilter] = function ( filterData, $filterContainer ) {
                            var runningTotalForFilter = 0,
                                $totalForFilter = $( '<label></label>' ),
                                filterColumn = filterData.keyId,
                                $checkBoxGroupContainer = $( '<div></div>' ).addClass( css.filterCheckboxGroup ),
                                $filterHeader = $( '<div class="' + css.filterCheckboxHeader + '"></div>' ),
                                selectedProperty = filterViewModel.createSelectedObservableArrayProperty( filterColumn ), // create selected property in view model
                                selectAllProperty = filterViewModel.createSelectedAllObservableProperty( filterColumn );

                            // ALM 1549 - in the case there are no values to filter by (no quarters for instance), don't add all the markup/bindings
                            if ( filterData.uniqueValues.length > 0 ) {
                                // build all the HTML
                                $checkBoxGroupContainer
                                    .append( $( [
                                    '<div class="' + css.filterCheckboxContainer + '">',
                                    '<input type="checkbox" class="' + css.filterAllCheckbox + '" data-bind="checked: ' + selectAllProperty + '" id="' + filterColumn + '_all" />',
                                    '<label class="' + css.filterCheckboxLabel + '" for="' + filterColumn + '_all">Select All</label>',
                                    '</div>',
                                    '<div data-bind="foreach: all' + filterColumn + '">',
                                    '<div class="' + css.filterCheckboxContainer + '" >',
                                    '<input type="checkbox" class="' + css.filterCheckbox + '" data-bind="value: value, checked: $root.' + selectedProperty + ', attr: { id: $root.buildId(filterColumn, value) }" />',
                                    '<label data-bind="text: $root.buildDescription(description, total), attr: { for: $root.buildId(filterColumn, value), title: $root.buildDescription(description, total) }" class="' + css.filterCheckboxLabel + '"></label>',
                                    '</div>',
                                    '</div>'].join( '' ) ) );

                                $.each( filterData.uniqueValues, function () {
                                    var uniqueKeyValuePair = this;

                                    // hydrate view model with all possible selections
                                    filterViewModel.createOrUpdateAllObservableArrayProperty({ filterColumn: filterColumn, value: uniqueKeyValuePair.key, description: uniqueKeyValuePair.value, total: uniqueKeyValuePair.total });

                                    runningTotalForFilter += uniqueKeyValuePair.total;
                                });
                            } else {
                                $checkBoxGroupContainer.append([
                                    '<div class="' + css.filterCheckboxContainer + '" >',
                                    '<label>No ' + filterData.displayName + ' Found</label>',
                                    '</div>'].join(''));
                            }

                            //$totalForFilter.text( filterData.displayName + ' (' + runningTotalForFilter + ')' );  NOT SURE IF THE COUNT IS NEEDED
                            $totalForFilter.text( filterData.displayName );

                            // bind all the events
                            $checkBoxGroupContainer.on( 'change', selectors.filterCheckbox, function () {
                                var $checkbox = $( this ),
                                    filterValue = $checkbox.val(),
                                    isChecked = $checkbox.is( ':checked' );

                                if ( isChecked ) {
                                    $.EventBus( filterEvents.applyFilter ).publish( filterColumn, filterValue );
                                } else {
                                    $.EventBus( filterEvents.removeFilter ).publish( filterColumn, filterValue );
                                }

                            } );

                            // attach it to the filter container
                            $filterContainer
                                .append( $filterHeader.html( $totalForFilter ) )
                                .append( $checkBoxGroupContainer );
                        };

                        _filterBuilders[filterBuilders.buildBinaryCheckboxFilter] = function ( filterData, $filterContainer ) {
                            var $checkBoxGroupContainer = $( '<div></div>' ).addClass( css.filterCheckboxGroup ).addClass( css.filterBinaryCheckboxGroup ),
                                filterColumn = filterData.keyId,
                                $filterHeader = $( '<div class="' + css.filterCheckboxHeader + '"></div>' ).html( $( '<label></label>' ).text( filterData.displayName ) ),
                                selectedProperty = filterViewModel.createSelectedObservableArrayProperty( filterColumn ); // create selected property in view model

                            // build all the HTML
                            $checkBoxGroupContainer
                                .append( $( ['<div data-bind="foreach: all' + filterColumn + '">',
                                '<input type="checkbox" data-bind="value: value, checked: $root.' + selectedProperty + ', attr: { id: $root.buildId(filterColumn, value) }" class="' + css.filterCheckbox + '" />',
                                '<label data-bind="text: $root.buildDescription(description, total), attr: { title: $root.buildDescription(description, total), for: $root.buildId(filterColumn, value)}" class="' + css.filterBinaryCheckboxLabel + '"></label> ',
                                '</div>'].join( '' ) ) );

                            $.each( filterData.uniqueValues, function () {
                                var uniqueValuePair = this;

                                // hydrate view model with all possible selections
                                filterViewModel.createOrUpdateAllObservableArrayProperty({ filterColumn: filterColumn, value: uniqueValuePair.key, description: uniqueValuePair.value, total: uniqueValuePair.total });
                            });

                            // bind all the events
                            $checkBoxGroupContainer.on( 'change', selectors.filterCheckbox, function () {
                                var $checkbox = $( this ),
                                    filterValue = $checkbox.val(),
                                    isChecked = $checkbox.is( ':checked' );

                                if ( isChecked ) {
                                    $.EventBus( filterEvents.applyFilter ).publish( filterColumn, filterValue );
                                } else {
                                    $.EventBus( filterEvents.removeFilter ).publish( filterColumn, filterValue );
                                }

                            } );

                            // attach it to the filter container
                            $filterContainer
                                .append( $filterHeader )
                                .append( $checkBoxGroupContainer );
                        };

                        _filterBuilders[filterBuilders.buildHierarchicalLOVFilter] = function ( filterData, $filterContainer ) {
                            var $select = $( '<select></select>' )
                                    .attr( 'id', filterData.keyId )
                                    .attr( 'multiple', 'multiple' )
                                    .addClass( css.hierarchicalChosen ),
                                $label = $( '<label></label>' ).attr( 'for', filterData.keyId ).text( filterData.displayName ),
                                keys = [], k, cachedHasOwn = Object.prototype.hasOwnProperty,
                                byDisplayName = function ( a, b ) {
                                    if ( a.displayName < b.displayName ) {
                                        return -1;
                                    }

                                    if ( a.displayName > b.displayName ) {
                                        return 1;
                                    }

                                    return 0;
                                };

                            // attach it to the filter container
                            $filterContainer
                                .append( $( '<div></div>' ).addClass( css.hierarchicalFilterContainer ).append( $label ).append( $select ) );

                            // need to be in the DOM for all the Modified Chosen goodness to kick in
                            $select.attr( 'data-placeholder', ' ' )
                                .modifiedChosen( {
                                    search_contains: true,
                                    groups_are_selectable: true,
                                    inhibit_auto_collapse: true,
                                    show_selected_in_list: true,
                                    show_titles_in_dropdown: true
                                } )
                                .change( function () {
                                    var $select = $( this ),
                                        selectedValues = $select.valAsHierarchicalArray(),
                                        $inputToFocus = $( '#' + $select.attr( 'id' ) + '_chzn' ).find( 'input' ).first();

                                    $inputToFocus.focus();

                                    $.EventBus( filterEvents.applyHierarchicalFilter ).publish( selectedValues );

                                } )
                                .html( '' );

                            // sort by cat code
                            for ( k in filterData.uniqueValues ) {
                                if ( cachedHasOwn.call( filterData.uniqueValues, k ) ) {
                                    keys.push( filterData.uniqueValues[k] );
                                }
                            }
                            keys.sort( byDisplayName );

                            // populate hierarchical widget
                            $.each( keys, function () {
                                var sortedKey = this,
                                    catWithSubs = filterData.uniqueValues[sortedKey.category],
                                    newGroup = $( "<optgroup>" )
                                        .attr( 'label', this.displayName )
                                        .attr( 'value', this.categoryId );

                                $select.append( newGroup );

                                $.each( catWithSubs.subcategories, function () {
                                    var subcategory = this,
                                        newOption = $( '<option></option>' ).attr( 'value', subcategory.subcategoryId ).text( subcategory.displayName );

                                    newGroup.append( newOption );
                                } );

                            } );

                            $select.trigger( 'liszt:updated' );

                            // This cannot be bound to ko view model, so have to react to clear filter here instead
                            $.EventBus( filterEvents.clearFilter ).subscribe( function () {
                                $select.val( [] ).trigger( 'liszt:updated' );
                            } );
                        };

                        _filterBuilders[filterBuilders.buildShowSelectedCheckboxFilter] = function ( filterData, $filterContainer ) {
                            var $checkBoxGroupContainer = $( '<div></div>' ).addClass( css.filterCheckboxGroup ),
                                filterColumn = filterData.keyId,
                                uniqueId = filterColumn + '_ShowSelected',
                                $filterHeader = $( '<div class="' + css.filterCheckboxHeader + '"></div>' ).html( $( '<label></label>' ).text( filterData.displayName ) ),
                                selectedProperty = filterViewModel.createSelectedObservableProperty( filterColumn ); // create selected property in view model

                            // build all the HTML
                            $checkBoxGroupContainer
                                .append( $( ['<div class="' + css.filterCheckboxContainer + '">',
                                '<input type="checkbox" data-bind="checked: ' + selectedProperty + '" class="' + css.filterCheckbox + '" id="' + uniqueId + '" />',
                                '<label for="' + uniqueId + '" class="' + css.filterCheckboxLabel + '">' + filterData.displayName + '</label> ',
                                '</div>'].join( '' ) ) );

                            // bind all the events
                            $checkBoxGroupContainer.on( 'change', selectors.filterCheckbox, function () {
                                var $checkbox = $( this ),
                                    isChecked = $checkbox.is( ':checked' ),
                                    filterValue = 'true';

                                if ( isChecked ) {
                                    $.EventBus( filterEvents.applyFilter ).publish( filterColumn, filterValue );
                                } else {
                                    $.EventBus( filterEvents.removeFilter ).publish( filterColumn, filterValue );
                                }

                            } );

                            // attach it to the filter container
                            $filterContainer
                                .append( $filterHeader )
                                .append( $checkBoxGroupContainer );
                        };

                        _filterBuilders[filterBuilders.buildMultiSelectLOVFilter] = function ( filterData, $filterContainer ) {
                            var filterColumn = filterData.keyId,
                                $label = $( '<label></label>' ).attr( 'for', filterColumn ).text( filterData.displayName ),
                                selectedProperty = filterViewModel.createSelectedObservableArrayProperty( filterColumn ), // create selected property in view model
                                allProperty,
                                $select = $( '<select></select>' )
                                    .addClass( css.chosen )
                                    .attr( 'id', filterColumn )
                                    .attr( 'multiple', 'multiple' );


                            $.each( filterData.uniqueValues, function () {
                                var uniqueKeyValuePair = this;

                                allProperty = filterViewModel.createOrUpdateAllObservableArrayProperty( {
                                    filterColumn: filterColumn,
                                    value: uniqueKeyValuePair.key,
                                    description: uniqueKeyValuePair.value,
                                    total: uniqueKeyValuePair.total,
                                    optionText: uniqueKeyValuePair.value + ' (' + uniqueKeyValuePair.total + ')'
                                } );
                            } );

                            $select
                                .attr( 'data-bind', 'options:' + allProperty + ', optionsText: \'optionText\', optionsValue:\'value\', selectedOptions:' + selectedProperty )
                                .change( function () {
                                    var selections = $( this ).val();

                                    // remove all existing ones
                                    $.EventBus( filterEvents.removeFilterAll ).publish( filterColumn );

                                    // add all selections if any are left
                                    if ( selections !== null ) {
                                        $.each( selections, function () {
                                            var selection = this;
                                            $.EventBus( filterEvents.applyFilter ).publish( filterColumn, selection );
                                        } );
                                    }

                                } );

                            $filterContainer
                                .append( $label )
                                .append( $select );
                        };
                    },
                    init = function () { // consumers should provide just the content of the search/filter sections

                        initializeFilterBuilders();
                        buildAndConfigurePanel();

                        // make sure all panels initially have the closed, we will be styling the initial open one below
                        // This is a bit of a hack to make sure any panel can be defaulted to open
                        $( selectors.panelToggle, $self ).each( function () {
                            var $panelToggleElement = $( this );

                            $panelToggleElement.removeClass( css.panelToggleOpen ).addClass( css.panelToggleClosed );
                        } );

                        // configure slim scroll - only for the default open scroll container otherwise the accordion collapse/expand messes with the slim scroll heights!
                        $( settings.defaultPanelSelector + ' ' + selectors.searchScrollContainer, $self ).each( function () {
                            var $scrollContainer = $( this ),
                                $panelContent,
                                $panelHeader;

                            calculateScrollableHeight.call( $scrollContainer );

                            $panelContent = $scrollContainer.parent();
                            $panelHeader = $panelContent.prev();

                            // We need to mark and keep track of which panel is active so we can implement custom event handler on active panel
                            // to close itself and open next panel on click.  The jqueryUI accordion removes the .ui-accordion-header-active class
                            // by the time our event handler has access to it so we have to manage it ourselves.
                            $panelHeader.addClass( css.internalActiveAccordion );

                            $panelHeader.find( selectors.panelToggle ).removeClass( css.panelToggleClosed ).addClass( css.panelToggleOpen );
                        } );

                        registerEventHandlers();

                        settings.initialize.call( $self );
                    };

                init();

            } );
        };
    }

}( jQuery, ko ));
